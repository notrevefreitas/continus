import re
import urllib3
from datetime import datetime
import sys
import os
import logging

logging.basicConfig(level=logging.DEBUG, filename="logfile", filemode="a+", format="%(asctime)-15s %(levelname)-8s %(message)s")
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

urllib3.disable_warnings()

patterns = [
    # """
    # De: input.exemplo.value     
    # Para: inputUtil.value(message, 'exemplo')
    # """
    (re.compile(r"input\.(.*?).value"),
     (r"inputUtil.value(message, '\1')")),
    # """
    #         De: eval\(getVar\)\(
    #         Para: inputUtil.value(message,
    #         """
    (re.compile(r"eval\(getVar\)\("),
     (r"inputUtil.value(message,")),

    (re.compile(r"activity\.([^\.]*?\s)"),
     (r"\1")),
    # """
    #         De: activity\.(.*?)\.(.*?)\.value
    #         Para: inputUtil.value(message, '$1')
    #         """
    (re.compile(r"activity\.([^(]*?)\.(.*?)\.value"),
     (r"inputUtil.value(\1, '\2')")),
    # """
    #         De: JSON\.parse\(Activity_(.*?)\.(.*?)\.value
    #         Para: JSON.parse(inputUtil.value($1, '$2')
    #         """
    (re.compile(r"JSON\.parse\(Activity_(.*?)\.(.*?)\.value"),
     (r"JSON.parse(inputUtil.value(\1, '\2')")),
    # """
    #         De: output.put\(['\"](.|['\"])*?,\s*\{\s*name:\s*(['\"].*?['\"])\s*,\s*value:\s*(.*?)\}\)
    #         Para: outputUtil.put($2, $3)
    #         """

    (re.compile(r"output\.put\([^,].*?,\s*\{\s*name:\s*(.*?)\s*,\s*value:\s*(.*?)\}\)", re.MULTILINE),
     (r"outputUtil.put(execution,\1,\2)")),
]

capture_scriptTask_tag = re.compile(r"(\<scriptTask[.\s\S]*?\<\/scriptTask\>)", re.MULTILINE)
single_quote = re.compile(r"([^\\])'((:?\\'|[^'])*?\$\{.*\}.*)'", re.MULTILINE)
double_quote = re.compile(r"([^\\])\"((:?\\\"|[^\"])*?\$\{.*\}.*)\"", re.MULTILINE)

capture_callActivity_tag = re.compile(r"(\<callActivity([.\s\S]*?)>[.\s\S]*?\<\/callActivity\>)", re.MULTILINE)

proxy_p2 = re.compile('//\t*\.proxy\(.*?\)')
proxy_p = re.compile("(\.proxy\(.*?\))")
ident_p = re.compile("([^/]execution\.setVariable\(\s*'([a-zA-Z](:?[a-zA-Z]|\d|_)*?)'\s*,.*\)\s*;)")
ident_p2 = re.compile("([^/]execution\.setVariable\(\s*\"([a-zA-Z](:?[a-zA-Z]|\d|_)*?)\"\s*,.*\)\s*;)")

input_parameter_capture = re.compile('<camunda:inputParameter name="inputParameter_(.*?)">(.*?)</camunda:inputParameter>')


class XmlTreatment():

    def apply_patterns(self, xml):
        for p in patterns:
            xml = re.sub(p[0], p[1], xml)
        return xml

    def apply_regular_expression(self, xml):
        """ Realiza o replacement do arquivo xml utilizando expressão regular """

        logging.debug('Realizando replacement com expressão regular no xml')

        try:
            def process_scriptTask_tag(tag):
                script = tag.group()

                """
                De: with (new JavaImporter(org.jsoup))
                Para: var Jsoup = Java.type('org.jsoup.Jsoup');
                """
                string_previous = 'with (new JavaImporter(org.jsoup))'
                string_next = "var Jsoup = Java.type('org.jsoup.Jsoup');"
                script = script.replace(string_previous, string_next)

                string_previous = 'with (new JavaImporter(java.lang))'
                string_next = "var Map = Java.type('java.lang.Map');"
                script = script.replace(string_previous, string_next)

                if 'JavaImporter' in script:
                    logging.warn("JavaImporter use detected!!!")
                if 'contains' in script:
                    logging.warn("contains use detected!!!")

                script = re.sub("\.contains\(\"(.*?)\"\)", ".includes(\"\\1\")", script)

                script = re.sub(ident_p, "\\1\nvar \\2 = execution.getVariable('\\2');", script)
                script = re.sub(ident_p2, "\\1\nvar \\2 = execution.getVariable('\\2');", script)

                if ".replaceAll('\"', '\\\\\\\\\"')" in script:
                    logging.warn(".replaceAll('\"', '\\\\\\\\\"') detected")
                    script = script.replace(".replaceAll('\"', '\\\\\\\\\"')", ".replaceAll('\"', '\\\\\"')")

                script = re.sub(r"\.data\(\s*\"(.*?)\"\s*,\s*([^\d\s].*)\)", '.data("\\1", \\2.toString())', script)
                script = re.sub(r"\.data\(\s*\"(.*?)\"\s*,\s*(\d*)\)", '.data("\\1", (\\2).toString())', script)
                script = re.sub(r"\.data\(\s*'(.*?)'\s*,\s*([^\d\s].*)\)", '.data("\\1", \\2.toString())', script)
                script = re.sub(r"\.data\(\s*'(.*?)'\s*,\s*(\d*)\)", '.data(\'\\1\', (\\2).toString())', script)
                # script = re.sub(r"\.data\((.*)\)", '.data(\\1.toString())', script)

                # script = re.sub(single_quote, "\\1`\\2`", script)
                # script = re.sub(double_quote, "\\1`\\2`", script)

                script = re.sub(single_quote, (lambda x: x.group(1) + "`" + x.group(2).replace("\\'", "\'") + "`"), script)
                script = re.sub(double_quote, (lambda x: x.group(1) + "`" + x.group(2).replace('\\"', '\"') + "`"), script)

                # script = re.sub("(query:\s*`)(.*?`)", (lambda x: x.group(1) + x.group(2).replace("\\'", "\"")), script)

                if script.find("solicitante") > 0:
                    script = script.replace('<script>', '<script>var solicitante = JSON.parse(message).credential.userPrincipalName.split("@")[0];\n')


                # TODO: configurar para não adicionar proxy em prod 
                script = re.sub('(Jsoup\.connect\(.*\))', "(Java.type('java.lang.System').getenv('ENVIRONMENT').toLowerCase() == 'pro' ? \\1 : \\1.proxy('proxyapp.santanderbr.corp', 80))", script)
                
                # script = script.replace('return request.execute();', "if (Java.type('java.lang.System').getenv('ENVIRONMENT').toLowerCase() == 'dev') {\n request.proxy('proxyapp.santanderbr.corp', 80);\n}\nreturn request.execute();\n")

                # if 'Jsoup' in script and ".execute()" in script:
                #     s = 'Jsoup.connect\(.*\)'
                #     script = re.sub('(;\n[\s\S]*?\.execute();)', s + '\\1',script)

                # if script.find("https://blaze.paas") > 0:
                #     #contém url BLAZE no script, remover proxy
                #     script = re.sub(proxy_p, '/*\\1*/', script)
                # s = """
                # Java.type('java.lang.System').getenv('ENVIRONMENT').toLowerCase() == 'dev' ? 'https://blz.paas.isbanbr.dev.corp/system-components-graph/graphql' :
                # Java.type('java.lang.System').getenv('ENVIRONMENT').toLowerCase() == 'stg' ? 'https://blz-stg.paas.santanderbr.pre.corp/system-components-graph/graphql' :
                # Java.type('java.lang.System').getenv('ENVIRONMENT').toLowerCase() == 'pre' ? 'https://blz.paas.santanderbr.pre.corp/system-components-graph/graphql' :
                # 'https://blz.paas.santanderbr.corp/system-components-graph/graphql'
                #     """
                # script = script.replace("'https://blaze.paas.santanderbr.corp/dlc-catalog-api/graphql'", s)
                # script = script.replace('"https://blaze.paas.santanderbr.corp/dlc-catalog-api/graphql"', s)
                # script = script.replace("'https://blaze.paas.santanderbr.pre.corp/dlc-catalog-api/graphql'", s)
                # script = script.replace('"https://blaze.paas.santanderbr.pre.corp/dlc-catalog-api/graphql"', s)

                # if (proxy_p.match(script)):
                #     script = re.sub(proxy_p, "", script)

                return script

            xml = re.sub(capture_scriptTask_tag, process_scriptTask_tag, xml)

            xml = self.apply_patterns(xml)

            # expression = r"output.put\(['\"].*?['\"],\s*\{\s*name:\s*['\"](.*?)['\"]\s*,\s*value:\s*(.*?)\}\)"
            # new_expression = r"eval(setOutput)('\1', \2)"
            
            return xml
        except Exception as error:
            message = 'Falha na linha: ' +       str(format(sys.exc_info()[-1].tb_lineno)                    ) + ' | Descricao: ' + str(error)
            logging.info(datetime.today().strftime('%d/%m/%Y - %H:%M') +                  ' | ' + str(message))
            return None


    def fix_children(self, xml, list_templates_blz=[], list_templates_exists_blz=[]):
        for i in list_templates_blz:
            xml = xml.replace(i[0], i[1])
        for j in list_templates_exists_blz:
            xml = xml.replace(j[0], j[1])
        return xml
    def apply_replace_value(self, xml, unique_id_aie):
        """ Realiza o replacement do arquivo xml """

        logging.debug('Realizando replacement no xml')

        try:            
            def process_callActivity_tag(callActivity):

                calledWf = re.findall('command">(.*?)<', callActivity.group(1))[0]

                if callActivity.group(1).find('"errorStopProcess">${true}') == -1 and callActivity.group(1).find('"errorStopProcess">true') == -1:
                    logging.info('' + unique_id_aie + ' <WARN> CALL ACTIVITY NÃO ABORTA O PROCESSO!!! ->> ' + calledWf)

                inputs = input_parameter_capture.findall(callActivity.group(1))
                input_replacement = '<camunda:inputParameter name="input_$$$inputParameterName$$$">$$$inputParameterValue$$$</camunda:inputParameter>'
                inputParameters = map(lambda x: input_replacement.replace('$$$inputParameterName$$$', x[0]).replace('$$$inputParameterValue$$$', self.apply_patterns(x[1])), inputs)
                
                pairs = [
                    ('attributes', callActivity.group(2)),
                    ('targetId', calledWf),
                    ('inputParameters', '\n'.join(inputParameters))
                ]

                replacement_call_activity = """
                <callActivity $$$attributes$$$>
  <extensionElements>
    <camunda:executionListener event="start">
      <camunda:script scriptFormat="JavaScript">var outbound_parameters  = S('[]');
var variables = execution.getVariablesLocal();

for(var variable in variables){
    if(variable.startsWith('input_')){
        var value = execution.getVariable(variable);
        var variableName = variable.substring('input_'.length);

        outbound_parameters.append({
            name: variableName,
             type: 'string',
            value: value || ''
        });
    }
}

execution.setVariableLocal('outbound_parameters', outbound_parameters);
execution.setVariableLocal('outbound_caller_id', execution.getActivityId());</camunda:script>
    </camunda:executionListener>
    <camunda:executionListener event="end">
      <camunda:script scriptFormat="JavaScript">execution.setVariable(execution.getActivityId(), outbound_response);</camunda:script>
    </camunda:executionListener>
    <camunda:in source="credential" target="credential" local="true" />
    <camunda:in source="parent_execution" target="parent_execution" local="true" />
    <camunda:in source="automation_uuid" target="automation_uuid" local="true" />
    <camunda:in source="outbound_parameters" target="outbound_parameters" local="true" />
    <camunda:in source="outbound_caller_id" target="outbound_caller_id" local="true" />
    <camunda:out source="outbound_response" target="outbound_response" local="true" />
    <camunda:in businessKey="${execution.processBusinessKey}" />
    <camunda:inputOutput>
      <camunda:inputParameter name="automation_uuid">$$$targetId$$$</camunda:inputParameter>
      <camunda:inputParameter name="credential">${message.prop('credential')}</camunda:inputParameter>
      <camunda:inputParameter name="parent_execution">${message.prop('execution')}</camunda:inputParameter>
$$$inputParameters$$$
    </camunda:inputOutput>
  </extensionElements>
</callActivity>
                """
                for p in pairs:
                    replacement_call_activity = replacement_call_activity.replace('$$$' + p[0] + '$$$', p[1])
                
                return replacement_call_activity

            xml = re.sub(capture_callActivity_tag, process_callActivity_tag, xml)



            # """
            # De: execution.setVariable('parametersById', parametersById);
            # Para: execution.setVariableLocal('parametersById', parametersById);
            # """
            # string_previous = "execution.setVariable('parametersById', parametersById);"
            # string_next = "execution.setVariableLocal('parametersById', parametersById);"
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: 'source="uniqueId" target="uniqueId"'
            # Para: 'source="credential" target="credential"'
            # """
            # string_previous = 'source="uniqueId" target="uniqueId"'
            # string_next = 'source="credential" target="credential"'
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: 'source="solicitante" target="solicitante"" 
            # Para: 'source="parent_execution" target="parent_execution"'
            # """
            # string_previous = 'source="solicitante" target="solicitante"'
            # string_next = 'source="parent_execution" target="parent_execution"'
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: 'source="idParent" target="idParent"'
            # Para: 'source="automation_uuid" target="automation_uuid"'
            # """
            # string_previous = 'source="idParent" target="idParent"'
            # string_next = 'source="automation_uuid" target="automation_uuid"'
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: 'source="command" target="command"'
            # Para: 'source="outbound_parameters" target="outbound_parameters"'
            # """
            # string_previous = 'source="command" target="command"'
            # string_next = 'source="outbound_parameters" target="outbound_parameters"'
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: 'source="parametersById" target="parametros"'
            # Para: 'source="outbound_caller_id" target="outbound_caller_id"'
            # """
            # string_previous = 'source="parametersById" target="parametros"'
            # string_next = 'source="outbound_caller_id" target="outbound_caller_id"'
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: "<camunda:in source='errorStopProcess' target="errorStopProcess" />" 
            # Para: ""
            # """
            # string_previous = '<camunda:in source="errorStopProcess" target="errorStopProcess" />'
            # string_next = ""
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: 'source="currentExecution" target="currentExecution"'
            # Para: 'source="outbound_response" target="outbound_response"'
            # """
            # string_previous = 'source="currentExecution" target="currentExecution"'
            # string_next = 'source="outbound_response" target="outbound_response"'
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: '<camunda:out source="outbound_response" target="outbound_response" /><camunda:out source='outbound_response' target="outbound_response" />" 
            # Para: '<camunda:out source="outbound_response" target="outbound_response" />'
            # """
            # string_previous = '<camunda:out source="outbound_response" target="outbound_response" /><camunda:out source='outbound_response' target="outbound_response" />'
            # string_next = '<camunda:out source="outbound_response" target="outbound_response" />'
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: 'name="command">'
            # Para: 'name="automation_uuid">'
            # """
            # string_previous = 'name="command">'
            # string_next = 'name="automation_uuid">'
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: "<camunda:inputParameter name="errorStopProcess">${false}</camunda:inputParameter>name=''>" 
            # Para: 'name="credential">${message.prop('credential')}'
            # """
            # string_previous = 'name="errorStopProcess">${false}'
            # string_next = 'name="credential">${message.prop(\'credential\')}'
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: 'name="errorStopProcess">${true}' 
            # Para: 'name="credential">${message.prop('credential')}'
            # """
            # string_previous = 'name="errorStopProcess">${true}'
            # string_next = 'name="credential">${message.prop('credential')}'
            # xml = xml.replace(string_previous, string_next)


            # """
            # De: "<camunda:inputParameter name='credential'>${message.prop('credential')}</camunda:inputParameter>"  
            # Para: "<camunda:inputParameter name='credential'>${message.prop('credential')}</camunda:inputParameter><camunda:inputParameter name='parent_execution'>${message.prop('execution')}</camunda:inputParameter>"
            # """
            # string_previous = '<camunda:inputParameter name="credential">${message.prop("credential")}</camunda:inputParameter>"
            # string_next = '<camunda:inputParameter name="credential">${message.prop("credential")}</camunda:inputParameter><camunda:inputParameter name="parent_execution">${message.prop("execution")}</camunda:inputParameter>"
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: "var parametersById  = S('[]');\n\nvar variables = execution.getVariablesLocal();\n\nfor(var variable in variables){\n    if(variable.startsWith('inputParameter_')){\n        var value = execution.getVariable(variable);\n        var variableName = variable.substring(variable.length, 15);\n        \n        parametersById.append({\n            name: variableName, \n            type: 'string',\n            value: value || ''\n        });\n    }\n}\n\nexecution.setVariableLocal('parametersById', parametersById);" 
            # Para: "var outbound_parameters  = S('[]');\nvar variables = execution.getVariablesLocal();\n\nfor(var variable in variables){\n    if(variable.startsWith('input_')){\n        var value = execution.getVariable(variable);\n        var variableName = variable.substring('input_'.length);\n\n        outbound_parameters.append({\n            name: variableName,\n             type: 'string',\n            value: value || ''\n        });\n    }\n}\n\nexecution.setVariableLocal('outbound_parameters', outbound_parameters);\nexecution.setVariableLocal('outbound_caller_id', execution.getActivityId());"
            # """
            # string_previous = "var parametersById  = S('[]');\n\nvar variables = execution.getVariablesLocal();\n\nfor(var variable in variables){\n    if(variable.startsWith('inputParameter_')){\n        var value = execution.getVariable(variable);\n        var variableName = variable.substring(variable.length, 15);\n        \n        parametersById.append({\n            name: variableName, \n            type: 'string',\n            value: value || ''\n        });\n    }\n}\n\nexecution.setVariableLocal('parametersById', parametersById);"
            # string_next = "var outbound_parameters  = S('[]');\nvar variables = execution.getVariablesLocal();\n\nfor(var variable in variables){\n    if(variable.startsWith('input_')){\n        var value = execution.getVariable(variable);\n        var variableName = variable.substring('input_'.length);\n\n        outbound_parameters.append({\n            name: variableName,\n             type: 'string',\n            value: value || ''\n        });\n    }\n}\n\nexecution.setVariableLocal('outbound_parameters', outbound_parameters);\nexecution.setVariableLocal('outbound_caller_id', execution.getActivityId());"
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: 'var parametros = new java.util.HashMap;\n\nif (execution.hasVariable('currentExecution') &amp;&amp; currentExecution) {\n    var currentParamList = currentExecution.prop('parametros');\n\n    currentParamList.elements().forEach(function (elem) {\n        var elemDTO = elem.mapTo('com.santander.aie.aie_camunda.dto.ParametersDTO');\n        parametros.put(elem.prop('name').value(), elemDTO);\n    });\n}\n\nactivity.put(execution.getCurrentActivityId(), parametros);\n\nif(execution.hasVariable('exceptionDetails') &amp;&amp; exceptionDetails){\n\n    var elements = exceptionDetails.elements();\n    exceptionList.append(elements.get(0));\n    exceptionList.append(elements.get(1));\n    execution.setVariable('exceptionList', exceptionList);\n}" 
            # Para: 'execution.setVariable(execution.getActivityId(), outbound_response);"
            # """
            # string_previous = 'var parametros = new java.util.HashMap;\n\nif (execution.hasVariable(\'currentExecution\') &amp;&amp; currentExecution) {\n    var currentParamList = currentExecution.prop(\'parametros\');\n\n    currentParamList.elements().forEach(function (elem) {\n        var elemDTO = elem.mapTo(\'com.santander.aie.aie_camunda.dto.ParametersDTO\');\n        parametros.put(elem.prop(\'name\').value(), elemDTO);\n    });\n}\n\nactivity.put(execution.getCurrentActivityId(), parametros);\n\nif(execution.hasVariable(\'exceptionDetails\') &amp;&amp; exceptionDetails){\n\n    var elements = exceptionDetails.elements();\n    exceptionList.append(elements.get(0));\n    exceptionList.append(elements.get(1));\n    execution.setVariable(\'exceptionList\', exceptionList);\n}"
            # string_next = 'execution.setVariable(execution.getActivityId(), outbound_response);'
            # xml = xml.replace(string_previous, string_next)

            # """
            # De: "inputParameter_"
            # Para: "input_"
            # """
            # string_previous = "inputParameter_"
            # string_next = "input_"
            # xml = xml.replace(string_previous, string_next)

            """ Realiza alteração no xml modificando o id coletado na base do 1.0 para seu novo id de associação na base do 2.0  """
            return xml
        except Exception as error:
            message = 'Falha na linha: ' + \
                str(format(sys.exc_info()[-1].tb_lineno)
                    ) + ' | Descricao: ' + str(error)
            logging.info(datetime.today().strftime('%d/%m/%Y - %H:%M') +
                  ' | ' + str(message))
            return None

    def collect_templates_in_xml(self, xml_string):
        """ Realiza a busca e coleta por todas as templates (filhos) que estejam associados ao workflow informado """
        logging.debug('Realizando busca por templates')
        try:
            templates = re.findall(r'name="command">(\w+)', xml_string)
            templates = list(set(templates))
            return templates
        except Exception as error:
            message = 'Falha na linha: ' + \
                str(format(sys.exc_info()[-1].tb_lineno)
                    ) + ' | Descricao: ' + str(error)
            logging.info(datetime.today().strftime('%d/%m/%Y - %H:%M') +
                  ' | ' + str(message))
            return []
