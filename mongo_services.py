import sys, os ; sys.path.insert(0,os.path.dirname(os.path.dirname(__file__)))
from datetime import datetime
from time import sleep
import psycopg2
import urllib3
import pymongo
import json
import logging

logging.basicConfig(level=logging.DEBUG, filename="logfile", filemode="a+", format="%(asctime)-15s %(levelname)-8s %(message)s")

urllib3.disable_warnings()

class MongoDB():

    def __init__(self,parameters):
        self.parameter = parameters
        self.components = []

    def mongo_connection(self):

        """ Realiza conexão no banco de dados MongoDB """
        
        logging.debug('Estabelecendo conexão com a base de dados MongoDB')
        
        for i in range(3):
            try:
                string_connection = "mongodb://%s:%s@%s:%s" % (self.parameter.mongo_user.decode(),self.parameter.mongo_password.decode(),self.parameter.mongo_server,self.parameter.mongo_port)
                connection = pymongo.MongoClient(string_connection)    
                return connection
            except Exception as error:
                sleep(3) ; continue
        message = 'Falha na linha: ' + str(format(sys.exc_info()[-1].tb_lineno)) + ' | Descricao: ' + str(error)
        logging.info('' + str(message))
        return None
    
    def mongo_close_connection(self,connection):

        """ Encerra conexão no banco de dados MongoDB """
        
        logging.debug('Finalizando conexão com a base de dados MongoDB')
        
        try:
            connection.close()
            return True
        except Exception as error:
            message = 'Falha na linha: ' + str(format(sys.exc_info()[-1].tb_lineno)) + ' | Descricao: ' + str(error)
            logging.info('' + str(message))
            return False

    def mongo_query_form(self,connection,unique_id):

        """ Realiza consulta no banco de dados MongoDB """
        
        logging.debug('Realizando coleta do dados de formulario')
        
        try:
            database = connection[self.parameter.mongo_database]
            collection = database[self.parameter.mongo_collection]
            result = collection.find_one({"uniqueId" : unique_id})
            if result:
                self.components = result.get('components', [])
            adjust_form = json.dumps(self.components, default=str)
            # adjust_form = adjust_form.replace("'", "''")
            return adjust_form
        except Exception as error:
            message = 'Falha na linha: ' + str(format(sys.exc_info()[-1].tb_lineno)) + ' | Descricao: ' + str(error)
            logging.info('' + str(message))
            return None