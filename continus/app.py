import sys, os ; sys.path.insert(0,os.path.dirname(os.path.dirname(__file__)))
from flask import Flask, request, jsonify
import src.api as call, logging, urllib3
from flask_cors import CORS
from waitress import serve

loggger = logging.getLogger('werkzeug')
loggger.setLevel(logging.ERROR)
urllib3.disable_warnings()
app = Flask(__name__)
CORS(app,origins=['https://blz.paas.isbanbr.dev.corp','https://blz.paas.santanderbr.pre.corp','https://blz.paas.santanderbr.corp'],methods=['GET','POST'])

""" Utilizado pelo PAAS para checar se a aplicação esta operante """

@app.route('/api-continuous-patching/health',methods=['GET'])
def checks_active_application():
    return 'success'

@app.route('/api-continuous-patching/get_environment',methods=['GET'])
def get_environment():
    try:
        return call.get_environment()
    except Exception as error:
        print('\nException in get_environment() ' + str(error),flush=True)
        return 'Falha ao consultar ambiente' 

@app.route('/api-continuous-patching/cd_cp_id',methods=['GET'])
def get_cd_cp_id():
    try:
        return call.cd_cp_id()
    except Exception as error:
        print('\nException in get_cd_cp_id() ' + str(error),flush=True)
        return jsonify([])
    
@app.route('/api-continuous-patching/cd_hostname',methods=['POST'])
def get_cd_hostname():
    try:
        data = request.json
        return call.cd_hostname(data['cd_cp_id'],data['cd_hostname'])
    except Exception as error:
        print('\nException in get_cd_hostname() ' + str(error),flush=True)
        return jsonify([])   

@app.route('/api-continuous-patching/nm_os',methods=['POST'])
def get_nm_os():
    try:
        data = request.json
        return call.nm_os(data['cd_hostname'])
    except Exception as error:
        print('\nException in get_cd_hostname() ' + str(error),flush=True)
        return jsonify([])       
    
@app.route('/api-continuous-patching/cd_valid_hostname_gui',methods=['POST'])
def get_cd_valid_hostname_gui():
    try:
        data = request.json
        return call.cd_valid_hostname_gui(data['cd_cp_id'],data['cd_hostname'])
    except Exception as error:
        print('\nException in cd_valid_hostname_gui() ' + str(error),flush=True)
        return jsonify([])

@app.route('/api-continuous-patching/cd_valid_hostname_bkp',methods=['POST'])
def get_cd_valid_hostname_bkp():
    try:
        data = request.json
        return call.cd_valid_hostname_bkp(data['cd_cp_id'],data['cd_hostname'])
    except Exception as error:
        print('\nException in cd_valid_hostname_bkp ' + str(error),flush=True)
        return jsonify([])  

@app.route('/api-continuous-patching/sel_region',methods=['GET'])
def get_sel_region():
    try:
        return call.sel_region()
    except Exception as error:
        print('\nException in sel_region ' + str(error),flush=True)
        return jsonify([])              

@app.route('/api-continuous-patching/get_region_info',methods=['POST'])
def get_region_info():
    try:
        data = request.json
        return call.get_region_info(data['cd_region'])
    except Exception as error:
        print('\nException in get_region_info ' + str(error),flush=True)
        return jsonify([])  


@app.route('/api-continuous-patching/sel_cyclo',methods=['GET'])
def get_sel_cyclo():
    try:
        data = request.args.get('cd_region')
        return call.sel_cyclo(data)
    except Exception as error:
        print('\nException in sel_cyclo' + str(error),flush=True)
        return jsonify([])   
#Start server
if __name__ == "__main__":
    try:
        print('\nServidor ativo',flush=True)
        port = int(os.environ.get('$PORT',8080))
        serve(app,host='0.0.0.0',port=8080)
    except Exception as error:
        print('\nUm falha ocorreu ao iniciar a API: ' + str(error),flush=True)
        os._exit(0)
