import sys, os ; sys.path.insert(0,os.path.dirname(os.path.dirname(__file__)))
from src.credentials import Config ; get = Config()
from src.sgl_services import Sgl ; sgl = Sgl() 
import datetime, urllib3, psycopg2
from flask import jsonify

urllib3.disable_warnings()
sys.stdout.flush()

def get_environment():
    try:
        return sgl.environment
    except Exception as error:
        print('\nException in get_environment() ' + str(error),flush=True)
        return 'Falha ao consultar ambiente'

def postgre_connection():
    try:
        connect = psycopg2.connect(host=get.postgre_server,database=get.postgre_database,port=int(get.postgre_port),user=get.postgre_user,password=get.postgre_pass)
        return connect
    except Exception as error:
        print('\nException in connection() ' + str(error),flush=True)
        return None
    
def cd_cp_id():
    try:
        connect = postgre_connection()
        list_current_date = []
        cursor = connect.cursor()
        cursor.execute("""SELECT CD_CP_ID FROM PUBLIC.V_CCA_CP_VALID_CPID""")
        values = cursor.fetchall()    
        
        for value in values:
            list_current_date.append({'cd_cp_id' : value[0]})
                
        connect.close()
        return jsonify(list_current_date)
    except Exception as error:
        print('\nException in cd_cp_id() ' + str(error),flush=True)
        return jsonify([])

def sel_region():
    try:
        connect = postgre_connection()
        list_sel_region = []
        cursor = connect.cursor()
        cursor.execute("""SELECT cd_region, ds_region FROM public.v_cca_cp_valid_region;""")
        values = cursor.fetchall()    
        
        for value in values:
            list_sel_region.append({"cd_region": value[0],"ds_region":value[1]})
                
        connect.close()
        return jsonify(list_sel_region)
    except Exception as error:
        print('\nException in sel_region() ' + str(error),flush=True)
        return jsonify([])

def get_region_info(cd_region):
    try:
        get_region_info = []
       
        connect = postgre_connection()
        cursor = connect.cursor()
        cursor.execute("""SELECT *FROM public.v_cca_cp_valid_region WHERE cd_region = '"""+ cd_region.upper() +"""' """)
        values = cursor.fetchall()    
        
        for value in values:
            get_region_info.append({"cd_region":value[0],"ds_region":value[1],"cd_aap_region":value[2],"id_aap_apply":value[3],"id_aap_reboot":value[4],"id_aap_verify":value[5],"cd_hostsccm":value[6],"nm_view":value[7]})
     
        connect.close()
        return jsonify(get_region_info)
    except Exception as error:
        print('\nException in get_region_info() ' + str(error),flush=True)
        return jsonify([])


def sel_cyclo(cd_region):
    try:
        list_sel_region = []
        cd_region  = cd_region.upper()
        connect = postgre_connection()
        cursor = connect.cursor()
        cursor.execute("""SELECT cd_cp_id FROM public.v_cca_cp_sel_cyclo where SUBSTRING (cd_cp_id, 1, 2) ='""" + cd_region  +"""' """)
        values = cursor.fetchall() 
        for value in values:
            list_sel_region.append({'cd_cp_id' : value[0]})
        connect.close()
        return jsonify(list_sel_region)
    except Exception as error:
        print('\nException in sel_region() ' + str(error),flush=True)
        return jsonify([])


def cd_hostname(cd_cp_id,post_hosts):
    try:
        post = ''
        if str(post_hosts).find(',') > 0:
            post_hosts = post_hosts.split(',')
            for post_host in post_hosts:
                post = post + "'" + post_host + "'" + ','
            post_hosts= post[:-1]
        else:
            post = post + "'" + post_hosts + "'" + ','
            post_hosts= post[:-1]

        connect = postgre_connection()
        cursor = connect.cursor()
        cursor.execute("""SELECT CD_HOSTNAME, DT_SLOT, HORA, NM_OS FROM PUBLIC.V_CCA_CP_VALID_HOSTNAME WHERE CD_CP_ID = '"""+ cd_cp_id +"""' AND CD_HOSTNAME IN ("""+ post_hosts.lower() +""")""")
        values = cursor.fetchall()
        list_host = []
        
        for value in values:
            date = datetime.datetime(value[1].year, value[1].month,value[1].day, 0, 0)
            date_current =date.strftime('%Y-%m-%d')
            list_host.append({'cd_hostname' : value[0], 'dt_slot' : date_current,'hora': value[2],'nm_os': value[3]})
        
        connect.close()
        return jsonify(list_host)
    except Exception as error:
        print('\nException in cd_hostname() ' + str(error),flush=True)
        return jsonify([])
        
def nm_os(post_hosts):       
    try:
        post = ''
        if str(post_hosts).find(',') > 0:
            post_hosts = post_hosts.split(',')
            for post_host in post_hosts:
                post = post + "'" + post_host + "'" + ','
            post_hosts= post[:-1]
        else:
            post = post + "'" + post_hosts + "'" + ','
            post_hosts= post[:-1]

        connect = postgre_connection()
        cursor = connect.cursor()
        cursor.execute("""SELECT cd_hostname, nm_os, nm_environ FROM public.v_cca_cp_valid_platform WHERE CD_HOSTNAME IN ("""+ post_hosts.lower() +""")""")
        values = cursor.fetchall()
        list_host = []

        for value in values:
            list_host.append({'cd_hostname' : value[0], 'nm_os' : value[1], 'nm_environ' : value[2]})

        connect.close()
        return jsonify(list_host)
    except Exception as error:
        print('\nException in cd_hostname() ' + str(error),flush=True)
        return jsonify([])

def cd_valid_hostname_gui(cd_cp_id,post_hosts):       
    try:
        post = ''
        if str(post_hosts).find(',') > 0:
            post_hosts = post_hosts.split(',')
            for post_host in post_hosts:
                post = post + "'" + post_host + "'" + ','
            post_hosts= post[:-1]
        else:
            post = post + "'" + post_hosts + "'" + ','
            post_hosts= post[:-1]

        connect = postgre_connection()
        cursor = connect.cursor()
        cursor.execute("""SELECT CD_HOSTNAME, DT_SLOT, HORA, NM_OS, CD_SLOT_TAG, DS_FUNCTION, NM_ASSIGN_GROUP, NM_ENVIRON FROM PUBLIC.V_CCA_CP_VALID_HOSTNAME_GUI WHERE CD_CP_ID = '"""+ cd_cp_id +"""' AND CD_HOSTNAME IN ("""+ post_hosts.lower() +""")""")
        values = cursor.fetchall()
        list_host = []
        
        for value in values:
            list_host.append({'cd_hostname' : value[0], 'dt_slot' : value[1].strftime("%Y-%m-%d"), 'hora' : value[2], 'nm_os' : value[3], 'cd_slot_tag' : value[4], 'ds_function' : value[5], 'nm_assign_group' : value[6], 'nm_environ' : value[7]})

        connect.close()
        return jsonify(list_host)
    except Exception as error:
        print('\nException in cd_hostname() ' + str(error),flush=True)
        return jsonify([])                 

def cd_valid_hostname_bkp(cd_cp_id,post_hosts):       
    try:
        post = ''
        if str(post_hosts).find(',') > 0:
            post_hosts = post_hosts.split(',')
            for post_host in post_hosts:
                post = post + "'" + post_host + "'" + ','
            post_hosts= post[:-1]
        else:
            post = post + "'" + post_hosts + "'" + ','
            post_hosts= post[:-1]

        connect = postgre_connection()
        cursor = connect.cursor()
        query = """SELECT cd_cp_id, cd_slot, dt_slot, hora, cd_hostname, cd_slot_tag, nm_os, ds_function, nm_environ, nm_assign_group FROM PUBLIC.V_CCA_CP_VALID_HOSTNAME_BKP WHERE CD_CP_ID = '"""+ cd_cp_id +"""' AND CD_HOSTNAME IN ("""+ post_hosts.lower() +""")"""
        cursor.execute(query)
        values = cursor.fetchall()
        
        list_host = []
        for value in values:
            list_host.append({'cd_hostname' : value[4], 'dt_slot' : value[2].strftime("%Y-%m-%d"), 'hora' : value[3], 'nm_os' : value[6], 'cd_slot_tag' : value[5], 'ds_function' : value[7], 'nm_assign_group' : value[9], 'nm_environ' : value[8]})

        connect.close()
        return jsonify(list_host)
    except Exception as error:
        print('\nException in cd_hostname_bkp() ' + str(error),flush=True)
        return jsonify([])
